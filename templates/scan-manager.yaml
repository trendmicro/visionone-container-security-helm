{{- if or (eq true .Values.visionOne.vulnerabilityScanning.enabled) (eq true .Values.visionOne.malwareScanning.enabled) (eq true .Values.visionOne.secretScanning.enabled) }}
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    {{- include "scanManager.labels" . | nindent 4 }}
  name: trendmicro-scan-manager
  namespace: {{ .Release.Namespace }}
spec:
  replicas: 1
  selector:
    matchLabels:
      {{- include "scanManager.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      annotations:
        checksum/auth: {{ include "container.security.auth.secret" . | sha256sum }}
        checksum/config: {{ include (print $.Template.BasePath "/scan-manager-config.yaml") . | sha256sum }}
{{- with (default .Values.podAnnotations.defaults .Values.podAnnotations.scanManager) }}
{{- toYaml . | nindent 8 }}
{{- end }}
      labels:
        {{- include "scanManager.labels" . | nindent 8 }}
    spec:
      serviceAccountName: {{ include "scanManager.serviceAccountName" . }}
{{- $securityContextEnabled := .Values.securityContext.enabled }}
{{- $securityContext := default .Values.securityContext.default .Values.securityContext.scanManager }}
{{- $podSecurityContext := default .Values.securityContext.default.pod $securityContext.pod }}
{{- $containerSecurityContext := default .Values.securityContext.default.container $securityContext.container.scanManager }}
{{- if $securityContextEnabled }}
      securityContext:
{{ toYaml $podSecurityContext | indent 8 }}
{{- end }}
      {{- $imageDefaults := .Values.images.defaults }}
      {{- with .Values.images.scanManager }}
      {{- $secret := (default (default "" $imageDefaults.imagePullSecret) .imagePullSecret) }}
      {{- if not (eq "" $secret) }}
      imagePullSecrets:
        - name: {{ $secret | quote }}
      {{- end }}
      containers:
      - name: scan-manager
{{- if $securityContextEnabled }}
        securityContext:
{{ toYaml $containerSecurityContext | indent 12 }}
{{- end }}
        {{- $project := (default $imageDefaults.project .project) }}
        {{- $repository := (ternary (required ".repository is required!" .repository)
          (printf "%s/%s" $project (required ".repository is required!" .repository))
          (not $project))
        }}
        {{- $tag := (default $imageDefaults.tag .tag) }}
        image: {{ include "image.source" (dict "repository" $repository "registry" .registry "tag" $tag "imageDefaults" $imageDefaults "digest" .digest) }}
        imagePullPolicy: {{ default (default "Always" $imageDefaults.pullPolicy) .pullPolicy }}
        {{- end }}
        ports:
          - containerPort: 8080
          - containerPort: 8070
          - containerPort: 8071
        workingDir: /var/scanmanager
        args:
        - --zap-devel={{ default "false" .Values.logConfig.devel }}
        - --zap-log-level={{ include "logLevel" (list .Values.visionOne.scanManager.logLevel .) }}
        - --zap-encoder={{ default "json" .Values.logConfig.encoder }}
        - --zap-stacktrace-level={{ default "error" .Values.logConfig.stacktraceLevel }}
        - --zap-time-encoding={{ default "rfc3339" .Values.logConfig.timeEncoding }}
        - --vision-one-scan-job-image=$(SCAN_JOB_IMAGE)
        - --vision-one-endpoint={{ include "container.security.endpoint" . }}
        - --enable-experimental-features={{ default "false" .Values.visionOne.experimental.enabled }}
        - --spc-mode={{ default "false" .Values.spc.enabled }}
        - --exclude-kubernetes-service-host-from-proxy={{ default "false" .Values.proxy.excludeKubernetesServiceHost }}
        - --excluded-namespaces
        {{- $excludeNS := (include "namespaceExclusions" .) }}
        - {{ $excludeNS | quote }}
        - --release-service={{ .Release.Service }}
        - --release-name={{ .Release.Name }}
        - --container-security-name={{ include "container.security.name" . }}
        - --max-job-count={{ default 5 .Values.visionOne.scanManager.maxJobCount }}
        {{- with .Values.images.scanManager }}
        {{- $secret := (default (default "" $imageDefaults.imagePullSecret) .imagePullSecret) }}
        {{- if not (eq "" $secret) }}
        - --image-pull-secret-name={{ $secret }}
        {{- end }}
        {{- end }}
        - --scan-config-path=/etc/config
        - --job-active-deadline={{ printf "%ds" (int .Values.visionOne.scanManager.activeDeadlineSeconds) }}
        - --malware-scan-job-active-deadline={{ printf "%ds" (int .Values.visionOne.scanManager.malwareScanActiveDeadlineSeconds) }}
        {{- if .Values.visionOne.vulnerabilityScanning.enabled }}
        - --enable-vulnerability-scanning
        {{- end }}
        {{- if or (eq true .Values.visionOne.malwareScanning.enabled) (eq true .Values.visionOne.secretScanning.enabled) }}
        - --exclude-namespaces={{ (include "namespaceExclusions" .) }}
        {{- end}}
        {{- if .Values.visionOne.malwareScanning.enabled }}
        - --enable-malware-scanning
        - --malware-scanner-endpoint={{ printf "%s:%d" (include "malwareScanner.svc.url" .) 50051 }}
          {{- $excludedPaths := (default (list) .Values.visionOne.malwareScanning.excludedPaths) }}
          {{- $combinedListPath := .Values.malwareScanner.defaultExcludedPaths }}
          {{- range $excludedPaths }}
          {{- $combinedListPath = append $combinedListPath . }}
          {{- end }}{{/* range */}}
        - --malware-exclude-paths={{ $combinedListPath | join "," }}
        {{- end }}
        {{- if .Values.visionOne.secretScanning.enabled }}
        - --enable-secret-scanning
        - --secret-default-exclude-paths={{ .Values.secretScanner.defaultExcludedPaths | join "," }}
        - --secret-max-file-size={{ .Values.visionOne.secretScanning.maxFileSize | int }}
        - --secret-scan-job-active-deadline={{ printf "%ds" (int .Values.visionOne.scanManager.secretScanActiveDeadlineSeconds) }}
        {{- end }}
        - --policyOperator-service-url={{ (include "policyOperator.svc.url" .) }}
        {{- if and (.Capabilities.APIVersions.Has "security.openshift.io/v1") (or (eq true .Values.visionOne.vulnerabilityScanning.enabled) (eq true .Values.visionOne.malwareScanning.enabled)) }}
        - --openshift-service-account-name={{ include "scanJob.serviceAccountName" . }}
        {{- $labels := include "scanner.labels" $ }}
        - --openshift-service-account-labels={{ $labels | replace "\n" "," | replace " " "" }}
        {{- if $.Values.serviceAccount.scanJob.annotations }}
        {{- $annotations := toYaml $.Values.serviceAccount.scanJob.annotations }}
        - --openshift-service-account-annotations={{ $annotations | replace "\n" "," | replace " " "" }}
        {{- end }}
        {{- end }}
        env:
        {{- include "proxy.selfSignedCertificates.env" . | nindent 8}}
        {{- include "container.security.proxy.env" . | nindent 8 }}
        {{- $scanJobImageDefaults := .Values.images.defaults }}
        {{- with .Values.images.scanJob }}
        {{- $scanJobProject := (default $scanJobImageDefaults.project .project) }}
        {{- $scanJobRepository := (ternary (required ".repository is required!" .repository)
          (printf "%s/%s" $scanJobProject (required ".repository is required!" .repository))
          (not $scanJobProject))
        }}
        {{- $scanJobTag := (default $scanJobImageDefaults.tag .tag) }}
        {{- $scanJobImage := include "image.source" (dict "repository" $scanJobRepository "registry" .registry "tag" $scanJobTag "imageDefaults" $scanJobImageDefaults "digest" .digest)}}
        - name: SCAN_JOB_IMAGE
          value: {{ $scanJobImage }}
        {{- end}} {{/* - with .Values.images.scanJob */}}
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        volumeMounts:
          - mountPath: /secrets
            name: auth-token
          - name: config
            mountPath: /etc/config/
          - name: grpc-certs
            mountPath: /etc/scanner/certs
            readOnly: true
          - mountPath: /var/scanmanager
            name: scanmanager-workdir
          {{- include "proxy.selfSignedCertificates.volumeMounts" . | nindent 10 }}
        resources:
{{ toYaml (default .Values.resources.defaults .Values.resources.scanManager) | indent 12 }}
      volumes:
        - name: auth-token
          secret:
            secretName: {{ template "container.security.fullname" . }}-auth
        - name: config
          projected:
            sources:
              - configMap:
                  name: {{ template "container.security.name" . }}-scan-manager-config
              - configMap:
                  name: {{ template "container.security.name" . }}-runtime-policy-config
              - configMap: 
                  name: {{ template "container.security.name" . }}-policy-config
        - name: scanmanager-workdir
          emptyDir:
            sizeLimit: 50Mi
        - name: grpc-certs
          secret:
            secretName: trendmicro-scan-manager-tls-certificate
        {{- include "proxy.selfSignedCertificates.volumes" . | nindent 8 }}
      terminationGracePeriodSeconds: 10
{{- if or .Values.nodeSelector.defaults .Values.nodeSelector.scanManager }}
      nodeSelector:
{{ toYaml (default .Values.nodeSelector.defaults .Values.nodeSelector.scanManager) | indent 8 }}
{{- end }}
{{- if or .Values.tolerations.defaults .Values.tolerations.scanManager }}
      tolerations:
{{ toYaml (default .Values.tolerations.defaults .Values.tolerations.scanManager) | indent 8 }}
{{- end }}
{{- if or .Values.affinity.defaults .Values.affinity.scanManager }}
      affinity:
{{ toYaml (default .Values.affinity.defaults .Values.affinity.scanManager) | indent 8 }}
{{- end }}
{{- $classname := (default (default "" .Values.priorityClassName.default ) .Values.priorityClassName.scanManager) }}
{{- if not (eq "" $classname) }}
      priorityClassName: "{{ $classname }}"
{{- end }}
      restartPolicy: Always

---
apiVersion: v1
kind: Service
metadata:
  labels:
    {{- include "scanManager.labels" . | nindent 4 }}
  name: trendmicro-scan-manager-service
  namespace: {{ .Release.Namespace }}
spec:
  ports:
  - name: https
    port: 8443
    targetPort: https
  - name: scan-request-server
    port: 8080
    targetPort: 8080
  - name: sbom-server
    port: 8070
    targetPort: 8070
  - name: malware-event-server
    port: 8071
    targetPort: 8071
  selector:
    {{- include "scanManager.selectorLabels" . | nindent 4 }}

{{ if .Values.networkPolicy.enabled }}
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: trendmicro-scan-manager-network-policy
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "scanManager.labels" . | nindent 4 }}
spec:
  podSelector:
    matchLabels:
      {{- include "scanManager.selectorLabels" . | nindent 6 }}
  policyTypes:
    - Ingress
  ingress:
    - from: # sbom-server
      - namespaceSelector: {}
        podSelector:
          matchLabels:
            {{- include "scanner.selectorLabels" . | nindent 12 }}
      ports:
        - protocol: TCP
          port: 8070
    - from: # malware-event-server
      - namespaceSelector: {}
        podSelector:
          matchLabels:
            {{- include "scanner.selectorLabels" . | nindent 12 }}
      ports:
        - protocol: TCP
          port: 8071
    - from: # any -- this is for metrics
      ports:
        - protocol: TCP
          port: 8443
    - from: # any -- this should just be kubelet for health probes
      ports:
        - protocol: TCP
          port: 8081
{{- end }}

{{ if .Values.serviceAccount.create }}
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: {{ include "scanManager.serviceAccountName" . }}
  labels:
    {{- include "scanManager.labels" . | nindent 4 }}
  {{- with .Values.serviceAccount.scanManager.annotations }}
  annotations:
    {{- toYaml . | nindent 4 }}
  {{- end }}
{{- end }}
{{- end }}
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: scan-manager-cleanup-resources-service-account
  labels:
    {{- include "scanManager.labels" . | nindent 4 }}
  annotations:
    helm.sh/hook: post-delete
    helm.sh/hook-delete-policy: hook-succeeded,hook-failed,before-hook-creation
    helm.sh/hook-weight: "-10"
---
apiVersion: batch/v1
kind: Job
metadata:
  name: trendmicro-scan-manager-cleanup-resources
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "scanManager.labels" . | nindent 4 }}
  annotations:
    helm.sh/hook: post-delete
    helm.sh/hook-delete-policy: hook-succeeded,hook-failed
spec:
  backoffLimit: 2
  activeDeadlineSeconds: 90
  ttlSecondsAfterFinished: 60
  template:
    metadata:
      annotations:
{{- with (default .Values.podAnnotations.defaults .Values.podAnnotations.scanManager) }}
{{- toYaml . | nindent 8 }}
{{- end }}
      labels:
        {{- include "scanManager.labels" . | nindent 8 }}
    spec:
      serviceAccountName: scan-manager-cleanup-resources-service-account
{{- $securityContextEnabled := .Values.securityContext.enabled }}
{{- $securityContext := default .Values.securityContext.default .Values.securityContext.scanManager }}
{{- $podSecurityContext := default .Values.securityContext.default.pod $securityContext.pod }}
{{- $containerSecurityContext := default .Values.securityContext.default.container $securityContext.container.scanManager }}
{{- if $securityContextEnabled }}
      securityContext:
        runAsNonRoot: true
        seccompProfile:
          type: RuntimeDefault
{{- end }}
      {{- $imageDefaults := .Values.images.defaults }}
      {{- with .Values.images.scanManager }}
      {{- $secret := (default (default "" $imageDefaults.imagePullSecret) .imagePullSecret) }}
      {{- if not (eq "" $secret) }}
      imagePullSecrets:
        - name: {{ $secret | quote }}
      {{- end }}
      restartPolicy: Never
      containers:
        - name: trendmicro-scan-manager-cleanup-resources
{{- if $securityContextEnabled }}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsNonRoot: true
{{- end }}
        {{- $project := (default $imageDefaults.project .project) }}
        {{- $repository := (ternary (required ".repository is required!" .repository)
          (printf "%s/%s" $project (required ".repository is required!" .repository))
          (not $project))
        }}
        {{- $tag := (default $imageDefaults.tag .tag) }}
          image: {{ include "image.source" (dict "repository" $repository "registry" .registry "tag" $tag "imageDefaults" $imageDefaults "digest" .digest) }}
          imagePullPolicy: {{ default (default "Always" $imageDefaults.pullPolicy) .pullPolicy }}
        {{- end }}
          workingDir: /var/scanmanager
          args:
          - --cleanup-mode
          - --excluded-namespaces
          {{- $excludeNS := (include "namespaceExclusions" .) }}
          - {{ $excludeNS | quote }}
          {{- if and (.Capabilities.APIVersions.Has "security.openshift.io/v1") (or (eq true .Values.visionOne.vulnerabilityScanning.enabled) (eq true .Values.visionOne.malwareScanning.enabled)) }}
          {{- $labels := include "scanner.labels" $ }}
          - --openshift-service-account-labels={{ $labels | replace "\n" "," | replace " " "" }}
          {{- end }}
          - --release-service={{ .Release.Service }}
          - --release-name={{ .Release.Name }}
          - --container-security-name={{ include "container.security.name" . }}
          - --auth-secret-name={{ template "container.security.fullname" . }}-auth
          {{- with .Values.images.scanManager }}
          {{- $secret := (default (default "" $imageDefaults.imagePullSecret) .imagePullSecret) }}
          {{- if not (eq "" $secret) }}
          - --image-pull-secret-name={{ $secret }}
          {{- end }}
          {{- end }}
          env:
          - name: NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          {{- include "proxy.selfSignedCertificates.env" . | nindent 10}}
          volumeMounts:
          - mountPath: /var/scanmanager
            name: scanmanager-workdir
      volumes:
      - name: scanmanager-workdir
        emptyDir:
          sizeLimit: 50Mi
{{- if or .Values.nodeSelector.defaults .Values.nodeSelector.scanManager }}
      nodeSelector:
{{ toYaml (default .Values.nodeSelector.defaults .Values.nodeSelector.scanManager) | indent 8 }}
{{- end }}
{{- if or .Values.tolerations.defaults .Values.tolerations.scanManager }}
      tolerations:
{{ toYaml (default .Values.tolerations.defaults .Values.tolerations.scanManager) | indent 8 }}
{{- end }}
{{- if or .Values.affinity.defaults .Values.affinity.scanManager }}
      affinity:
{{ toYaml (default .Values.affinity.defaults .Values.affinity.scanManager) | indent 8 }}
{{- end }}
{{- $classname := (default (default "" .Values.priorityClassName.default ) .Values.priorityClassName.scanManager) }}
{{- if not (eq "" $classname) }}
      priorityClassName: "{{ $classname }}"
{{- end }}
