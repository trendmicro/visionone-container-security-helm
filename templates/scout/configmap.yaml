{{- if eq (include "scout.shouldDeploy" .) "true" }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ template "container.security.name" . }}-scout-config
  labels:
    {{- include "scout.labels" . | nindent 4 }}
data:
  default_rules.yaml: |
    - rule: Dummy rule
      desc: A dummy rule
      condition: evt.type = setuid and (evt.num=0)
      output: none
      priority: NOTICE
  falco.yaml: |-
{{- /* default falco.yaml */}}
{{- $falcoConfig := (.Files.Get "config/falco.yaml" | fromYaml) }}

{{- /* 
make cri sockets list
    container_engines:
      cri:
        sockets:
        - /run/containerd/containerd.sock
        - /run/crio/crio.sock
        - /run/k3s/containerd/containerd.sock
*/ -}}
{{- $containerengines := dict "cri" (dict "sockets" list) }}
{{- with .Values.scout.falco -}}
{{- $sockets := list 
  (dict "path" "/run/cri/cri.sock" "enabled" (and .cri .cri.enabled))
  (dict "path" "/run/dockershim.sock" "enabled" (and .dockershim .dockershim.enabled))
  (dict "path" "/run/k0s/containerd.sock" "enabled" (and .k0s .k0s.enabled))
  (dict "path" "/run/k3s/containerd/containerd.sock" "enabled" (and .k3s .k3s.enabled))
  (dict "path" "/var/run/docker.sock" "enabled" (and .docker .docker.enabled))
  (dict "path" "/run/crio/crio.sock" "enabled" (and .crio .crio.enabled))
  (dict "path" "/run/containerd/containerd.sock" "enabled" (and .containerd .containerd.enabled))
 -}}

{{- range $sockets }}
{{- if .enabled }}
{{- $_ := set $containerengines.cri "sockets" (append $containerengines.cri.sockets .path) }}
{{- end }}
{{- end }}
{{- end }}

{{- /* override config */ -}}
{{- $overrideConfig := dict 
  "stdout_output" (dict "enabled" (default false .Values.scout.falco.stdout_enabled))
  "syslog_output" (dict "enabled" (default false .Values.scout.falco.syslog_enabled))
  "log_level" (include "logLevel" (list .Values.scout.falco.logLevel .))
  "container_engines" $containerengines
}}

{{- /* custom rules config */ -}}
{{- with .Values.visionOne.runtimeSecurity.customRules }}
{{- if .enabled }}
{{- /* 
    rules_files:
    ...
    - /etc/scout/rules.d/customrules.d
    - /etc/scout/rules.d/custom_rules_override.yaml
*/ -}}
{{- $customruleFiles := list }}
{{- if and .ociRepository.enabled .ociRepository.ruleFiles }}
{{- range .ociRepository.ruleFiles }}
{{- $customruleFiles = append $customruleFiles (printf "/etc/scout/rules.d/customrules.d/%s" .) }}
{{- end }}
{{- end }}

{{- if not $customruleFiles }}
{{- $customruleFiles = append $customruleFiles "/etc/scout/rules.d/customrules.d" }}
{{- end }}
{{- $customruleFiles = append $customruleFiles "/etc/scout/rules.d/custom_rules_override.yaml" }}

{{- $_ := set $overrideConfig "rules_files" (concat $falcoConfig.rules_files $customruleFiles) }}

{{- /*
    ruleset_tags:
    - customrule
*/ -}}
{{- $_ := set $overrideConfig "ruleset_tags" (list .rulesetTag) }}

{{- /*
   http_output:
    enabled: true
    url: http://some.url
    user_agent: "falcosecurity/falco"
    ruleset_tag: customrule
    custom_headers:
    - "Authorization: Splunk ${SPLUNK_HEC_TOKEN}"
    ca_path: "/etc/ssl/certs"
    ca_cert: "/etc/ssl/certs/ca-certificates.crt"
*/ -}}
{{- $customHeaders := list }}
{{- $hasHecTokenSecretName := (and .output.splunk.hecTokenSecretName (ne .output.splunk.hecTokenSecretName "")) -}}
{{- range .output.splunk.headers}}
{{- if contains "Authorization:" . }}
{{- if $hasHecTokenSecretName -}}
{{- fail "customRules.output.splunk.hecTokenSecretName automatically adds Splunk HEC auth header, no other Authorization headers allowed" -}}
{{- end}}
{{- end}}
{{- $customHeaders = append $customHeaders . }}
{{- end }}
{{- if $hasHecTokenSecretName }}
{{- $customHeaders = append $customHeaders "Authorization: Splunk ${SPLUNK_HEC_TOKEN}" }}
{{- end }}

{{- $_ := set $overrideConfig
  "http_output" (dict 
    "enabled" (and (eq .enabled true) (eq .output.visionOne.enabled false))
    "url" (default "" .output.splunk.url)
    "ruleset_tag" (default "" .rulesetTag)
    "custom_headers" $customHeaders
    "ca_path" "/etc/ssl/certs"
    "ca_cert" "/etc/ssl/certs/ca-certificates.crt") 
}}
{{- end }}{{/*if .enabled*/}}
{{- end }}{{/*with customRules*/}}

{{- /* 
  Congfiguration for sensitive data redaction
  sanitizer_output:
    enabled: true
    patterns:
      proc.pcmdline: (?<=--process\s)\s?(\S+)|(?<=--root\s)\s?(\S+)
      fd.sip: (?<=169\.254\.)(\S+) 
*/ -}}
{{- if .Values.scout.falco.sanitizer_output.enabled }}
{{- if .Values.scout.falco.sanitizer_output.patterns }}
{{- $_ := set $overrideConfig "sanitizer_output" (dict "enabled" true "patterns" .Values.scout.falco.sanitizer_output.patterns) }}
{{- else }}
{{- fail "Redaction pattern is required if output sanitizer is enabled." }}
{{- end }}
{{- end }}

{{- /* extra config */ -}}
{{- if .Values.scout.falco.config }}
{{ $overrideConfig = mergeOverwrite $overrideConfig .Values.scout.falco.config }}
{{- end -}}
{{ toYaml (mergeOverwrite $falcoConfig $overrideConfig) | nindent 4 }}

---
{{- if .Values.visionOne.runtimeSecurity.customRules.enabled }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ template "container.security.name" . }}-customrules
  labels:
    {{- include "scout.labels" . | nindent 4 }}
data:
{{ (tpl (.Files.Glob "config/customrules/*.{yaml,yml}").AsConfig .) | indent 2 }}
{{- end }}
{{- end }}