{{- if and (or (eq true .Values.visionOne.vulnerabilityScanning.enabled) (eq true .Values.visionOne.malwareScanning.enabled) (eq true .Values.visionOne.secretScanning.enabled)) (not .Values.spc.enabled) }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ template "container.security.name" . }}-scan-manager-config
  labels:
    {{- include "scanManager.labels" . | nindent 4 }}
data:
  inheritNodeSelector: {{ .Values.nodeSelector.inheritNodeSelectorScanner | quote }}
  inheritTolerations: {{ .Values.tolerations.inheritTolerationsScanner | quote }}
  filterInheritNodeSelector: |
    {{- if .Values.nodeSelector.filterNodeSelectorScanner }}
    {{- toYaml .Values.nodeSelector.filterNodeSelectorScanner | nindent 6 }}
    {{- end }}
  filterInheritTolerations: |
    {{- if .Values.tolerations.filterTolerationsScanner }}
    {{- toYaml .Values.tolerations.filterTolerationsScanner | nindent 6 }}
    {{- end }}
  scan-job-template.yaml: |
    apiVersion: batch/v1
    kind: Job
    metadata:
      labels:
        {{- include "scanner.labels" . | nindent 8 }}
        sidecar.istio.io/inject: "false"
      annotations:
        {{- with (default .Values.podAnnotations.defaults .Values.podAnnotations.scanner) }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
        argocd.argoproj.io/sync-options: Prune=false
        argocd.argoproj.io/compare-options: IgnoreExtraneous
    spec:
      backoffLimit: 2
      activeDeadlineSeconds: {{ .Values.visionOne.scanManager.activeDeadlineSeconds }}
      ttlSecondsAfterFinished: 60
      template:
        metadata:
          labels:
            {{- include "scanner.labels" . | nindent 12 }}
            ignoreRuntimeScan: true
            sidecar.istio.io/inject: "false"
          annotations:
            {{- with (default .Values.podAnnotations.defaults .Values.podAnnotations.scanner) }}
            {{- toYaml . | nindent 12 }}
            {{- end }}
            argocd.argoproj.io/sync-options: Prune=false
            argocd.argoproj.io/compare-options: IgnoreExtraneous
        spec:
{{- $securityContextEnabled := .Values.securityContext.enabled }}
{{- $securityContext := default .Values.securityContext.default .Values.securityContext.scanner }}
{{- $podSecurityContext := default .Values.securityContext.default.pod $securityContext.pod }}
{{- $initSecurityContext := default .Values.securityContext.default.container $securityContext.init }}
{{- $targetSecurityContext := default .Values.securityContext.default.container $securityContext.target }}
{{- if $securityContextEnabled }}
          securityContext:
{{ toYaml $podSecurityContext | indent 12 }}
{{- end }}
{{- if and .Values.securityContextConstraints.create (.Capabilities.APIVersions.Has "security.openshift.io/v1") }}
          serviceAccountName: {{ include "scanJob.serviceAccountName" . }}
{{- end }}
{{- if and (not .Values.nodeSelector.inheritNodeSelectorScanner) (or .Values.nodeSelector.defaults .Values.nodeSelector.scanner) }}
          nodeSelector:
{{ toYaml (default .Values.nodeSelector.defaults .Values.nodeSelector.scanner) | indent 12 }}
{{- end }}
{{- if and (not .Values.tolerations.inheritTolerationsScanner) (or .Values.tolerations.defaults .Values.tolerations.scanner) }}
          tolerations:
{{ toYaml (default .Values.tolerations.defaults .Values.tolerations.scanner) | indent 12 }}
{{- end }}
          restartPolicy: Never
          volumes:
          - name: utility-volume
            emptyDir: {}
          - name: tmp-volume
            emptyDir: {}
{{- if and .Values.visionOne.vulnerabilityScanning.enabled .Values.scanner.imageAnnotations.enabled }}
{{- include "containerRuntime.sock.volumes" ( list $ .Values.scanner.imageAnnotations ) | trim | nindent 10 }}
{{- end }}
          initContainers:
          - name: vulnerability-scanner-init
            image: IMAGE
            imagePullPolicy: Always
            volumeMounts:
              - mountPath: /utility
                name: utility-volume
            args:
            - init
{{- if $securityContextEnabled }}
            securityContext:
{{ toYaml $initSecurityContext | indent 14 }}
{{- end }}
            resources:
{{ toYaml (default .Values.resources.defaults .Values.resources.scanner) | indent 14 }}
          containers:
          - name: target
            image: IMAGE
            imagePullPolicy: Always
            args:
{{- if and .Values.visionOne.vulnerabilityScanning.enabled .Values.scanner.imageAnnotations.enabled }}
{{- include "containerRuntime.sock.args" ( list "cri-path" "/host" .Values.scanner.imageAnnotations ) | trim | nindent 14 }}
{{- end }}
            env:
            {{- if .Values.visionOne.malwareScanning.enabled }}
            - name: TM_AM_SCAN_TIMEOUT_SECS
              value: {{ .Values.visionOne.malwareScanning.scanTimeoutSeconds }}
            {{- end }}
            {{- if .Values.visionOne.secretScanning.enabled }}
            - name: TMAS_SCAN_TIMEOUT_SECS
              value: {{ .Values.visionOne.secretScanning.scanTimeoutSeconds }}
            {{- end }}
            volumeMounts:
              - mountPath: /utility
                name: utility-volume
                readOnly: true
              - mountPath: /tmp
                name: tmp-volume
{{- if and .Values.visionOne.vulnerabilityScanning.enabled .Values.scanner.imageAnnotations.enabled }}
{{- include "containerRuntime.sock.volumeMounts" ( list "/host" .Values.scanner.imageAnnotations ) | trim | nindent 14 }}
{{- end }}
{{- if $securityContextEnabled }}
            securityContext:
{{ toYaml $targetSecurityContext | indent 14 }}
{{- end }}
            resources:
{{ toYaml (default .Values.resources.defaults .Values.resources.scanner) | indent 14 }}

---
{{- $secretName := "trendmicro-scan-manager-tls-certificate" }}
{{- $useExisting := and .Values.useExistingSecrets (eq "true" (.Values.useExistingSecrets.operatorSecrets | toString)) }}
{{- $existingSecret := "" }}
{{- if $useExisting }}
  {{- $existingSecret = lookup "v1" "Secret" .Release.Namespace $secretName }}
{{- end }}

{{- $keyPem := "" }}
{{- $certPem := "" }}
{{- $caCertPem := "" }}

{{- if and $useExisting $existingSecret }}
  {{- /* Use existing certificate data */ -}}
  {{- $keyPem = index $existingSecret.data "key.pem" }}
  {{- $certPem = index $existingSecret.data "cert.pem" }}
  {{- $caCertPem = index $existingSecret.data "ca-cert.pem" }}
{{- else }}
  {{- /* Generate new certificates */ -}}
  {{- $cn := (printf "trendmicro-scan-manager-service.%s.svc.cluster.local:8071" .Release.Namespace) }}
  {{- $ca := genCA (printf "trendmicro-scan-manager-service-ca") 3650 }}
  {{- $cert := genSignedCert $cn nil (list $cn) 3650 $ca }}
  {{- $keyPem = $cert.Key | b64enc }}
  {{- $certPem = $cert.Cert | b64enc }}
  {{- $caCertPem = $ca.Cert | b64enc }}
{{- end }}

apiVersion: v1
kind: Secret
metadata:
  name: {{ $secretName }}
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "scanManager.labels" . | nindent 4 }}
type: Opaque
data:
  key.pem: {{ $keyPem | quote }}
  cert.pem: {{ $certPem | quote }}
  ca-cert.pem: {{ $caCertPem | quote }}
{{- end }}
