{{- if eq true .Values.visionOne.admissionController.enabled }}

{{- $secretName := printf "%s-tls-certificate" (include "admissionController.fullname" .) }}
{{- $useExisting := and .Values.useExistingSecrets (eq "true" (.Values.useExistingSecrets.operatorSecrets | toString)) }}
{{- $existingSecret := "" }}
{{- if $useExisting }}
  {{- $existingSecret = lookup "v1" "Secret" .Release.Namespace $secretName }}
{{- end }}

{{- $keyPem := "" }}
{{- $certPem := "" }}
{{- $caCertPem := "" }}
{{- $cn := printf "%s.%s.svc" "trendmicro-admission-controller" .Release.Namespace }}

{{- if and $useExisting $existingSecret }}
  {{- /* Use existing certificate data */ -}}
  {{- $keyPem = index $existingSecret.data "key.pem" }}
  {{- $certPem = index $existingSecret.data "cert.pem" }}
  {{- $caCertPem = index $existingSecret.data "ca-cert.pem" }}
{{- else }}
  {{- /* Generate new certificates */ -}}
  {{- $ca := genCA (printf "%s-ca" "trendmicro-admission-controller") (default 3650 (int .Values.visionOne.admissionController.certificate.lifetime)) }}
  {{- $cert := genSignedCert (default $cn .Values.visionOne.admissionController.certificate.commonName) (default nil .Values.visionOne.admissionController.certificate.ipAlternativeNames) (default (list $cn) .Values.visionOne.admissionController.certificate.dnsAlternativeNames) (default 3650 (int .Values.visionOne.admissionController.certificate.lifetime)) $ca }}
  {{- $keyPem = $cert.Key | b64enc }}
  {{- $certPem = $cert.Cert | b64enc }}
  {{- $caCertPem = $ca.Cert | b64enc }}
{{- end }}

apiVersion: v1
kind: Secret
metadata:
  name: {{ $secretName }}
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "admissionController.labels" . | nindent 4 }}
type: Opaque
data:
  key.pem: {{ $keyPem | quote }}
  cert.pem: {{ $certPem | quote }}
  ca-cert.pem: {{ $caCertPem | quote }}

---
apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingWebhookConfiguration
metadata:
  name: {{ include "admissionController.fullname" . }}
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "admissionController.labels" . | nindent 4 }}
webhooks:
  - name: {{ default $cn .Values.visionOne.admissionController.certificate.commonName }}
    namespaceSelector:
      matchExpressions:
      {{- $excludedNamespaces := (include "namespaceExclusions" .) | splitList "," }}
      {{- if $excludedNamespaces }}
      - key: kubernetes.io/metadata.name
        operator: NotIn
        values:
        {{- range $excludedNamespace := $excludedNamespaces }}
        - {{ quote $excludedNamespace }}
        {{- end }}
      {{- end }}
      {{- range $k, $v := (required "A validationNamespaceSelector is required" .Values.visionOne.admissionController.validationNamespaceSelector) }}
      {{- range $match := $v }}
      -
      {{- range $key, $val := $match }}
        {{- if eq $key "values" }}
        values:
          {{- range $val }}
          - {{ quote . }}
          {{- end }}
        {{- else }}
        {{ $key }}: {{ quote $val }}
        {{- end }}
      {{- end }}
      {{- end }}
      {{- end }}
    rules:
      - apiGroups:
          - '*'
        apiVersions:
          - '*'
        operations:
          - '*'
        resources:
          - "pods"
          - "pods/exec"
          - "pods/portforward"
          - "pods/attach"
          - "pods/ephemeralcontainers"
          - "replicasets"
          - "replicationcontrollers"
          - "deployments"
          - "statefulsets"
          - "daemonsets"
          - "jobs"
          - "cronjobs"
        scope: "Namespaced"
    failurePolicy: {{ required "A valid failure policy is required!" .Values.visionOne.admissionController.failurePolicy }}
    clientConfig:
      service:
        name: trendmicro-admission-controller
        namespace: {{ .Release.Namespace }}
        path: "/api/validate"
      caBundle: {{ $caCertPem | quote }}
    admissionReviewVersions: ["v1", "v1beta1"]
    sideEffects: None
    timeoutSeconds: {{ default 30 .Values.visionOne.admissionController.webhookTimeoutSeconds }}

{{- end }}
