{{- if or (and (eq true .Values.visionOne.malwareScanning.enabled) (not .Values.spc.enabled)) (and .Values.spc.enabled .Values.spc.encryptionKey) }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: trendmicro-malware-scanner
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "malwareScanner.labels" . | nindent 4 }}
spec:
  {{- if not .Values.visionOne.malwareScanning.scanner.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "malwareScanner.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      annotations:
{{- with (default .Values.podAnnotations.defaults .Values.podAnnotations.malwareScanner) }}
{{- toYaml . | nindent 8 }}
{{- end }}
      labels:
        {{- include "malwareScanner.labels" . | nindent 8 }}
    spec:
      serviceAccountName: {{ include "malwareScanner.serviceAccountName" . }}
{{- $securityContextEnabled := .Values.securityContext.enabled }}
{{- $securityContext := default .Values.securityContext.default .Values.securityContext.malwareScanner }}
{{- $podSecurityContext := default .Values.securityContext.default.pod $securityContext.pod }}
{{- $scannerSecurityContext := default .Values.securityContext.default.pod $securityContext.scanner }}
{{- if $securityContextEnabled }}
      securityContext:
{{ toYaml $podSecurityContext | indent 8 }}
{{- end }}{{/* if $securityContextEnabled */}}
      {{- $imageDefaults := .Values.images.defaults }}
      {{- with .Values.images.malwareScanner }}
      {{- $secret := (default (default "" $imageDefaults.imagePullSecret) .imagePullSecret) }}
      {{- if not (eq "" $secret) }}
      imagePullSecrets:
        - name: {{ $secret | quote }}
      {{- end }}
      containers:
        - name: malware-scanner
{{- if $securityContextEnabled }}
          securityContext:
{{ toYaml $scannerSecurityContext | indent 12 }}
{{- end }}{{/* if $securityContextEnabled */}}
          {{- $project := (default $imageDefaults.project .project) }}
          {{- $repository := (ternary (required ".repository is required!" .repository)
            (printf "%s/%s" $project (required ".repository is required!" .repository))
            (not $project))
          }}
          {{- $tag := (default $imageDefaults.tag .tag) }}
          image: {{ include "image.source" (dict "repository" $repository "registry" .registry "tag" $tag "imageDefaults" $imageDefaults "digest" .digest) }}
          imagePullPolicy: {{ default (default "Always" $imageDefaults.pullPolicy) .pullPolicy }}
      {{- end }}
          ports:
            - name: grpc
              containerPort: {{ .Values.visionOne.malwareScanning.scanner.port }}
              protocol: TCP
          livenessProbe:
            {{- toYaml .Values.visionOne.malwareScanning.scanner.livenessProbe | nindent 12 }}
          readinessProbe:
            {{- toYaml .Values.visionOne.malwareScanning.scanner.readinessProbe | nindent 12 }}
          resources:
{{ toYaml (default .Values.resources.defaults .Values.resources.malwareScanner) | indent 12 }}
          volumeMounts:
            {{- include "proxy.selfSignedCertificates.volumeMounts" . | nindent 12 }}
            - name: auth-token
              mountPath: /secrets
            {{- if and .Values.spc.enabled .Values.spc.encryptionKey }}
            - name: encryption-key
              mountPath: /spc/secret
              subPath: encryptionKey
            {{- end }}
          env:
            - name: HTTPS_PROXY
              valueFrom:
                secretKeyRef:
                  name: {{ template "container.security.name" . }}-outbound-proxy-credentials
                  key: allProxy
            - name: TM_AM_LOG_LEVEL
              value: "{{ include "logLevel" (list .Values.visionOne.malwareScanning.scanner.logLevel .) }}"
            - name: TM_AM_SCAN_LOG
              value: "{{ .Values.visionOne.malwareScanning.scanner.scanLog }}"
            - name: TM_AM_SCAN_CACHE
              value: "{{ .Values.visionOne.malwareScanning.scanner.enableScanCache }}"
            - name: TM_AM_FLUENTBIT_CONF
              value: fluent-bit.conf
            - name: TM_AM_SCAN_CACHE_REDIS_HOST
              value: "localhost:6379"
            - name:  TM_AM_V1_ENDPOINT
              value: "{{ printf "%s%s" .Values.visionOne.endpoint "/api/authorizer/callerIdentity" }}"
            - name: TM_AM_SPC_MODE
              value: "{{ .Values.spc.enabled }}"
            {{- include "proxy.selfSignedCertificates.env" . | nindent 12}}
      volumes:
        - name: auth-token
          secret:
            secretName: {{ template "container.security.fullname" . }}-auth
        {{- if and .Values.spc.enabled .Values.spc.encryptionKey }}
        - name: encryption-key
          secret:
            secretName: {{ template "container.security.fullname" . }}-encryption-key
        {{- end }}
        {{- include "proxy.selfSignedCertificates.volumes" . | nindent 8 }}
{{- if or .Values.nodeSelector.defaults .Values.nodeSelector.malwareScanner }}
      nodeSelector:
{{ toYaml (default .Values.nodeSelector.defaults .Values.nodeSelector.malwareScanner) | indent 8 }}
{{- end }}
{{- if or .Values.tolerations.defaults .Values.tolerations.malwareScanner }}
      tolerations:
{{ toYaml (default .Values.tolerations.defaults .Values.tolerations.malwareScanner) | indent 8 }}
{{- end }}
{{- if or .Values.affinity.defaults .Values.affinity.malwareScanner }}
      affinity:
{{ toYaml (default .Values.affinity.defaults .Values.affinity.malwareScanner) | indent 8 }}
{{- end }}

---
{{- if .Values.serviceAccount.create -}}
apiVersion: v1
kind: ServiceAccount
metadata:
  name: {{ include "malwareScanner.serviceAccountName" . }}
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "malwareScanner.labels" . | nindent 4 }}
  {{- with .Values.serviceAccount.malwareScanner.annotations }}
  annotations:
    {{- toYaml . | nindent 4 }}
  {{- end }}
automountServiceAccountToken: true
{{- end }}

---
apiVersion: v1
kind: Service
metadata:
  name: {{ include "malwareScanner.svc" . }}
  labels:
    {{- include "malwareScanner.labels" . | nindent 4 }}
spec:
  ports:
    - port: {{ .Values.visionOne.malwareScanning.scanner.port }}
      targetPort: grpc
      protocol: TCP
  selector:
    {{- include "malwareScanner.selectorLabels" . | nindent 4 }}

---
{{- if .Values.visionOne.malwareScanning.scanner.autoscaling.enabled }}
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: {{ include "malwareScanner.fullname" . }}
  labels:
    {{- include "malwareScanner.labels" . | nindent 4 }}
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: trendmicro-malware-scanner
  minReplicas: {{ .Values.visionOne.malwareScanning.scanner.autoscaling.minReplicas }}
  maxReplicas: {{ .Values.visionOne.malwareScanning.scanner.autoscaling.maxReplicas }}
  metrics:
    {{- if .Values.visionOne.malwareScanning.scanner.autoscaling.targetCPUUtilization }}
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: {{ .Values.visionOne.malwareScanning.scanner.autoscaling.targetCPUUtilization }}
    {{- end }}
    {{- if .Values.visionOne.malwareScanning.scanner.autoscaling.targetMemoryUtilization }}
    - type: Resource
      resource:
        name: memory
        target:
          type: Utilization
          averageUtilization: {{ .Values.visionOne.malwareScanning.scanner.autoscaling.targetMemoryUtilization }}
    {{- end }}
{{- end }}

---
{{- $networkpolicyEnabled := and (hasKey .Values.networkPolicy "malwareScanner") (hasKey .Values.networkPolicy.malwareScanner "enabled") | ternary .Values.networkPolicy.malwareScanner.enabled .Values.networkPolicy.enabled }}
{{ if $networkpolicyEnabled }}

apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: malware-scanner-networkpolicy
  namespace: {{ .Release.Namespace }}
  labels:
     {{- include "malwareScanner.labels" . | nindent 4 }}
spec:
  podSelector:
    matchLabels:
       {{- include "malwareScanner.selectorLabels" . | nindent 6 }}
  policyTypes:
    - Ingress
  ingress:
    - from:
      - podSelector: {}
      ports:
        - protocol: TCP
          port: {{ .Values.visionOne.malwareScanning.scanner.port }}
{{- end }}

{{- end }}
